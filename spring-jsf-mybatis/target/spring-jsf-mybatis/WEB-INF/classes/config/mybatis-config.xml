<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
  
<!-- Configuration for mybatis. For more information go to https://mybatis.github.io/mybatis-3/configuration.html  -->  
<configuration>
  
  <!-- These are externalizable, substitutable properties that can be 
    configured in a typical Java Properties file instance, or passed in 
    through sub-elements of the properties element. -->
  <!-- <properties resource="org/mybatis/example/config.properties">
    <property name="username" value="dev_user"/>
    <property name="password" value="F2Fa3!33TYyg"/>
  </properties> -->
  
  <!-- settings modify the way that MyBatis behaves at runtime.  -->
  <settings>
    <!-- Globally enables or disables any caches configured in any
      mapper under this configuration. (default = true)-->
    <setting name="cacheEnabled" value="true" />
    
    <!-- Globally enables or disables lazy loading. When enabled,
      all relations will be lazily loaded. This value can be
      superseded for an specific relation by using the fetchType
      attribute on it. (default = false)-->
    <setting name="lazyLoadingEnabled" value="false" />
    
    <!-- When enabled, an object with lazy loaded properties will 
      be loaded entirely upon a call to any of the lazy properties. 
      Otherwise, each property is loaded on demand. (default = true)-->
    <setting name="aggressiveLazyLoading" value="true" />
    
    <!-- Allows or disallows multiple ResultSets to be returned from 
      a single statement (compatible driver required). (default = true)-->
    <setting name="multipleResultSetsEnabled" value="true" />
    
    <!-- Uses the column label instead of the column name. Different 
      drivers behave differently in this respect. Refer to the driver 
      documentation, or test out both modes to determine how your 
      driver behaves. (default = true)-->
    <setting name="useColumnLabel" value="true" />
    
    <!-- Allows JDBC support for generated keys. A compatible driver 
      is required. This setting forces generated keys to be used if 
      set to true, as some drivers deny compatibility but still work 
      (e.g. Derby). (default = false) -->
    <setting name="useGeneratedKeys" value="false" />
    
    <!-- Specifies if and how MyBatis should automatically map columns to 
      fields/properties. NONE disables auto-mapping. PARTIAL will only auto-map 
      results with no nested result mappings defined inside. FULL will auto-map 
      result mappings of any complexity (containing nested or otherwise). 
      (values = NONE, PARTIAL, FULL )(default = PARTIAL)-->
    <setting name="autoMappingBehavior" value="PARTIAL" />
    
    <!-- Configures the default executor. SIMPLE executor does nothing special. 
      REUSE executor reuses prepared statements. BATCH executor reuses statements 
      and batches updates. (values = SIMPLE, REUSE, BATCH )(default = SIMPLE)-->
    <setting name="defaultExecutorType" value="SIMPLE" />
    
    <!-- Sets the number of seconds the driver will wait for a response from 
      the database. (values = Any positive integer )(default = Not Set - null)-->
    <!-- <setting name="defaultStatementTimeout" value="Not Set" /> -->
    
    <!-- Allows using RowBounds on nested statements. (default = false)-->
    <setting name="safeRowBoundsEnabled" value="false" />
    
    <!-- Enables automatic mapping from classic database column names A_COLUMN 
      to camel case classic Java property names aColumn.  (default = false)-->
    <setting name="mapUnderscoreToCamelCase" value="false" />
    
    <!-- MyBatis uses local cache to prevent circular references and speed up 
      repeated nested queries. By default (SESSION) all queries executed during 
      a session are cached. If localCacheScope=STATEMENT local session will be 
      used just for statement execution, no data will be shared between two 
      different calls to the same SqlSession. 
      (values = SESSION, STATEMENT )(default = SESSION)-->
    <setting name="localCacheScope" value="SESSION" />
    
    <!-- Specifies the JDBC type for null values when no specific JDBC type was 
      provided for the parameter. Some drivers require specifying the column 
      JDBC type but others work with generic values like NULL, VARCHAR or OTHER. 
      (values = JdbcType enumeration. Most common are: NULL, VARCHAR and OTHER )
      (default = OTHER) -->
    <setting name="jdbcTypeForNull" value="OTHER" />
    
    <!-- Specifies which Object's methods trigger a lazy load.
     (values = A method name list separated by commas )(default = equals,clone,hashCode,toString) -->
    <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString" />
    
    <!-- Specifies the language used by default for dynamic SQL generation.
     (values = A type alias or fully qualified class name. )
     (default = org.apache.ibatis.scripting.xmltags.XMLDynamicLanguageDriver ) -->
    <!-- results in class not found error
    <setting name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.xmltags.XMLDynamicLanguageDriver " /> -->
    
    <!-- Specifies if setters or map's put method will be called when a retrieved 
      value is null. It is useful when you rely on Map.keySet() or null value 
      initialization. Note primitives such as (int,boolean,etc.) will not be 
      set to null. (default = false) -->
    <setting name="callSettersOnNulls" value="false" />
    
    <!-- Specifies the prefix string that MyBatis will add to the logger names. 
     (values = Any String  )(default = not set) -->
    <!-- <setting name="logPrefix" value="not set" /> -->
    
    <!-- Specifies which logging implementation MyBatis should use. If this setting 
      is not present logging implementation will be autodiscovered.
     (values = SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING )
     (default = not set) -->
    <!-- <setting name="logImpl" value="not set" /> -->
    
    <!-- Specifies the proxy tool that MyBatis will use for creating lazy loading 
      capable objects. (values = CGLIB | JAVASSIST )(default = CGLIB) -->
    <setting name="proxyFactory" value="CGLIB" />
    
  </settings>
  
  <!-- Specifies the package where MyBatis will search for beans that will be registered 
    as an alias using uncapitalized non-qualified class name of the bean. -->
  <typeAliases>
    <package name="com.cee.sjm" />
  </typeAliases>
  
  <environments default="development">
    <environment id="development">
      <!-- makes use of the JDBC commit and rollback facilities directly. It relies on the 
        connection retrieved from the dataSource to manage the scope of the transaction. -->
      <transactionManager type="JDBC">
      </transactionManager>
      <dataSource type="UNPOOLED">
        <property name="driver" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/test"/>
        <property name="username" value="root"/>
        <property name="password" value="itch42OO!@"/>
      </dataSource>
    </environment>
  </environments>
  
  <mappers>
    <mapper resource="mybatis-mappings/user-mapper.xml"/>
  </mappers>
  
</configuration>